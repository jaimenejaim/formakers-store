{"version":3,"sources":["../../controllers/users.js"],"names":["repository","require","Token","exports","findAll","req","res","next","then","result","length","status","json","message","catch","err","find","category","id","params","create","user","first_name","body","last_name","type","email","password","payload","fabric","updateLastLogIn","token","errorMessage","update","delete"],"mappings":"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","file":"users.js","sourcesContent":["'use strict';\n\nconst repository = require('../repositories/users');\nconst Token = require('../resources/Token');\n\nexports.findAll = (req, res, next) => {\n    repository.findAll()\n        .then(result => {\n\n            if(result.length === 0) return res.status(404).json({ message : \"Users not found\" });\n\n            res.status(200).json(result);\n        }).catch(err => res.status(500).json(err));\n};\n\nexports.find = (req,res,next) => {\n\n    let category = {\n        id : req.params.id\n    };\n\n    repository.find(category.id)\n        .then(result => {\n            if(!result) return res.status(404).json({ message : \"User not found\" });\n            res.status(200).json(result);\n        }).catch(err => res.status(500).json(err));\n};\n\nexports.create = (req, res, next) => {\n\n    let user = {\n        id : req.params.id,\n        first_name : req.body.first_name,\n        last_name : req.body.last_name,\n        type : req.body.type,\n        email : req.body.email,\n        password : req.body.password\n    };\n\n    repository.create(user)\n        .then(result => {\n          repository.find(result.id)\n              .then(user => {\n\n                  let payload = {\n                      id : user.id,\n                      email : user.email,\n                      type : user.type\n                  };\n\n                    Token.fabric(payload).then(token => {\n\n                        repository.updateLastLogIn(payload)\n                            .then(() => res.status(200).json(token))\n                            .catch(err => res.status(500).json({ errorMessage : err.message }));\n\n                    }).catch(err => {\n                        res.status(500).json({ errorMessage : err.message });\n                    });\n              })\n              .catch(err => res.status(500).json({ errorMessage : err.message }));\n        })\n        .catch(err => res.status(500).json(err));\n};\n\n\nexports.update = (req,res,next) => {\n    let user = {\n        id : req.params.id,\n        first_name : req.body.first_name,\n        last_name : req.body.last_name,\n        type : req.body.type\n    };\n\n        repository.update(user)\n        .then(() => res.status(200).json({ message : \"Updated Successfully\"}))\n        .catch(err => res.status(500).json(err));\n};\n\n\nexports.delete = (req,res,next) => {\n    let category = {\n        id : req.params.id\n    };\n\n    repository.delete(category)\n        .then(() => res.status(200).json({ message : \"Deleted Successfully\"}))\n        .catch(err => res.status(500).json(err));\n};"]}