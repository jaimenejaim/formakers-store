{"version":3,"sources":["../../controllers/auth.js"],"names":["repository","require","Token","exports","authenticate","req","res","next","user","email","body","password","logIn","then","result","status","json","payload","id","type","fabric","updateLastLogIn","token","catch","errorMessage","err","message","refresh","requestPassword","changePassword"],"mappings":"AAAA;;AAEA,IAAMA,aAAaC,QAAQ,uBAAR,CAAnB;AACA,IAAMC,QAAQD,QAAQ,oBAAR,CAAd;;AAEAE,QAAQC,YAAR,GAAuB,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;;AAGvC,QAAIC,OAAO;AACPC,eAAQJ,IAAIK,IAAJ,CAASD,KADV;AAEPE,kBAAWN,IAAIK,IAAJ,CAASC;AAFb,KAAX;;AAKAX,eAAWY,KAAX,CAAiBJ,KAAKC,KAAtB,EAA6BD,KAAKG,QAAlC,EACKE,IADL,CACU,kBAAU;AACZ,YAAG,CAACC,MAAJ,EAAW;AACPR,gBAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAE,WAAY,4BAAd,EAArB;AACA;AACH;;AAED,YAAIC,UAAU;AACVC,gBAAKJ,OAAOI,EADF;AAEVT,mBAAQK,OAAOL,KAFL;AAGVU,kBAAOL,OAAOK;AAHJ,SAAd;;AAMAjB,cAAMkB,MAAN,CAAaH,OAAb,EAAsBJ,IAAtB,CAA2B,iBAAS;;AAEhCb,uBAAWqB,eAAX,CAA2BJ,OAA3B,EACKJ,IADL,CACU;AAAA,uBAAMP,IAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBM,KAArB,CAAN;AAAA,aADV,EAEKC,KAFL,CAEW;AAAA,uBAAOjB,IAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEQ,cAAeC,IAAIC,OAArB,EAArB,CAAP;AAAA,aAFX;AAKH,SAPD,EAOGH,KAPH,CAOS,eAAO;AACZjB,gBAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEQ,cAAeC,IAAIC,OAArB,EAArB;AACH,SATD;AAWH,KAxBL,EAyBKH,KAzBL,CAyBW;AAAA,eAAOjB,IAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBS,GAArB,CAAP;AAAA,KAzBX;AA2BH,CAnCD;;AAqCAtB,QAAQwB,OAAR,GAAkB,UAACtB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA;AACH,CAXD;;AAcAJ,QAAQyB,eAAR,GAA0B,UAACvB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;;AAE1C;;AAEAA;AACH,CALD;;AAOAJ,QAAQ0B,cAAR,GAAyB,UAACxB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;;AAEzCA;AACH,CAHD","file":"auth.js","sourcesContent":["'use strict';\n\nconst repository = require('../repositories/users');\nconst Token = require('../resources/Token');\n\nexports.authenticate = (req, res, next) => {\n\n\n    let user = {\n        email : req.body.email,\n        password : req.body.password\n    };\n\n    repository.logIn(user.email, user.password)\n        .then(result => {\n            if(!result){\n                res.status(401).json({ \"message\" : \"email or password is wrong\" });\n                return;\n            }\n\n            let payload = {\n                id : result.id,\n                email : result.email,\n                type : result.type\n            };\n\n            Token.fabric(payload).then(token => {\n\n                repository.updateLastLogIn(payload)\n                    .then(() => res.status(200).json(token))\n                    .catch(err => res.status(500).json({ errorMessage : err.message }));\n\n\n            }).catch(err => {\n                res.status(500).json({ errorMessage : err.message });\n            });\n\n        })\n        .catch(err => res.status(500).json(err));\n\n};\n\nexports.refresh = (req, res, next) => {\n    // repository.findAll()\n    //     .then(result => {\n    //         if(result.length === 0){\n    //             res.status(404).json({ \"message\" : \"Products not found\" });\n    //             return;\n    //         }\n    //         res.status(200).json(result);\n    //     }).catch(err => res.status(500).json(err));\n\n    next();\n};\n\n\nexports.requestPassword = (req, res, next) => {\n\n    //retorno o token e o tempo restante para ele poder trocar a senha.\n\n    next();\n};\n\nexports.changePassword = (req, res, next) => {\n    \n    next();\n};"]}