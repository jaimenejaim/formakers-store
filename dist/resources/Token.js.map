{"version":3,"sources":["../../resources/Token.js"],"names":["jwt","require","moment","env","process","NODE_ENV","secure","__dirname","secret_token","api","expires","add","valueOf","exports","fabric","value","Promise","resolve","reject","payload","token","sign","expiresIn","expire_in","err","decode","decoded","valid","verify","Error"],"mappings":"AAAA;;AAEA,IAAIA,MAAMC,QAAQ,cAAR,CAAV;AACA,IAAIC,SAASD,QAAQ,QAAR,CAAb;AACA,IAAIE,MAAMC,QAAQD,GAAR,CAAYE,QAAZ,IAAwB,aAAlC;AACA,IAAMC,SAAYL,QAAQM,YAAY,wBAApB,EAA8CJ,GAA9C,CAAlB;AACA,IAAIK,eAAeF,OAAOG,GAAP,CAAWD,YAA9B;AACA,IAAME,UAAUR,SAASS,GAAT,CAAa,EAAb,EAAgB,MAAhB,EAAwBC,OAAxB,EAAhB;;AAEA;;;AAGAC,QAAQC,MAAR,GAAiB,UAACC,KAAD,EAAW;AACxB,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAASC,MAAT,EAAoB;AACnC,YAAI;AACA,gBAAIC,UAAU;AACVC,uBAAOpB,IAAIqB,IAAJ,CAASN,KAAT,EAAgBP,YAAhB,EAA8B,EAACc,WAAWZ,OAAZ,EAA9B,CADG;AAEVa,2BAAWb;AAFD,aAAd;AAIAO,oBAAQE,OAAR;AACH,SAND,CAME,OAAOK,GAAP,EAAY;AACVN,mBAAOM,GAAP;AACH;AACJ,KAVM,CAAP;AAWH,CAZD;;AAcA;;;AAGAX,QAAQY,MAAR,GAAiB,iBAAS;AACtB,WAAO,IAAIT,OAAJ,CAAY,UAACC,OAAD,EAASC,MAAT,EAAoB;AACnC,YAAI;AACA,gBAAIQ,UAAU1B,IAAIyB,MAAJ,CAAWL,KAAX,EAAkBZ,YAAlB,CAAd;AACAS,oBAAQS,OAAR;AACH,SAHD,CAGC,OAAOF,GAAP,EAAW;AACRN,mBAAOM,GAAP;AACH;AACJ,KAPM,CAAP;AAQH,CATD;;AAYA;;;AAGAX,QAAQc,KAAR,GAAiB,iBAAS;AACtB,WAAO,IAAIX,OAAJ,CAAY,UAACC,OAAD,EAASC,MAAT,EAAoB;AACnClB,YAAI4B,MAAJ,CAAWR,KAAX,EAAkBZ,YAAlB,EAAgC,UAACgB,GAAD,EAAME,OAAN,EAAkB;;AAE9C,gBAAIF,GAAJ,EAASN,OAAO,IAAIW,KAAJ,CAAU,sCAAV,CAAP;;AAETZ,oBAAQS,OAAR;AACH,SALD;AAMH,KAPM,CAAP;AAQH,CATD","file":"Token.js","sourcesContent":["'use strict';\n\nlet jwt = require('jsonwebtoken');\nlet moment = require('moment');\nlet env = process.env.NODE_ENV || \"development\";\nconst secure    = require(__dirname + '/../config/secure.json')[env];\nlet secret_token = secure.api.secret_token;\nconst expires = moment().add(12,'days').valueOf();\n\n/*\n* Gera um novo token\n* */\nexports.fabric = (value) => {\n    return new Promise((resolve,reject) => {\n        try {\n            let payload = {\n                token: jwt.sign(value, secret_token, {expiresIn: expires}),\n                expire_in: expires\n            };\n            resolve(payload);\n        } catch (err) {\n            reject(err);\n        }\n    });\n};\n\n/*\n* Decodifica o token\n* */\nexports.decode = token => {\n    return new Promise((resolve,reject) => {\n        try {\n            let decoded = jwt.decode(token, secret_token);\n            resolve(decoded);\n        }catch (err){\n            reject(err);\n        }\n    });\n};\n\n\n/*\n* Verifica se o token é válido\n* */\nexports.valid  = token => {\n    return new Promise((resolve,reject) => {\n        jwt.verify(token, secret_token, (err, decoded) => {\n\n            if (err) reject(new Error(\"Failed verification your credentials\"));\n\n            resolve(decoded);\n        });\n    });\n};\n\n"]}