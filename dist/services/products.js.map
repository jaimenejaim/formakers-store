{"version":3,"sources":["../../services/products.js"],"names":["repository_manufacturer","require","repository_category","exports","create","req","res","next","Promise","all","vefityManufacturer","varifyCategory","then","catch","status","json","message","err","resolve","reject","find","body","manufacturerId","result","Error","categoryId","update","delete"],"mappings":";;AAAA,IAAMA,0BAA0BC,QAAQ,+BAAR,CAAhC;AACA,IAAMC,sBAAsBD,QAAQ,4BAAR,CAA5B;;AAEAE,QAAQC,MAAR,GAAiB,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;;AAEjC;;;AAGAC,YAAQC,GAAR,CAAY,CAACC,oBAAD,EAAuBC,gBAAvB,CAAZ,EACKC,IADL,CACU;AAAA,eAAML,MAAN;AAAA,KADV,EAEKM,KAFL,CAEW;AAAA,eAAOP,IAAIQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAUC,IAAID,OAAhB,EAArB,CAAP;AAAA,KAFX;;AAKA;;;AAGA,aAASN,kBAAT,GAA8B;AAC1B,eAAO,IAAIF,OAAJ,CAAY,UAACU,OAAD,EAASC,MAAT,EAAoB;AACnCnB,oCAAwBoB,IAAxB,CAA6Bf,IAAIgB,IAAJ,CAASC,cAAtC,EAAsDV,IAAtD,CAA2D,kBAAU;AACjE,oBAAGW,WAAW,IAAd,EAAmB;AACfJ,2BAAO,IAAIK,KAAJ,CAAU,wBAAV,CAAP;AACH,iBAFD,MAEK;AACDN;AACH;AACJ,aAND,EAMGL,KANH,CAMS,eAAO;AACZM,uBAAOF,GAAP;AACH,aARD;AASH,SAVM,CAAP;AAWH;;AAED;;;AAGA,aAASN,cAAT,GAA0B;AACtB,eAAO,IAAIH,OAAJ,CAAY,UAACU,OAAD,EAASC,MAAT,EAAoB;AACnCjB,gCAAoBkB,IAApB,CAAyBf,IAAIgB,IAAJ,CAASI,UAAlC,EAA8Cb,IAA9C,CAAmD,kBAAU;AACzD,oBAAGW,WAAW,IAAd,EAAmB;AACfJ,2BAAO,IAAIK,KAAJ,CAAU,oBAAV,CAAP;AACH,iBAFD,MAEK;AACDN;AACH;AACJ,aAND,EAMGL,KANH,CAMS,eAAO;AACZM,uBAAOF,GAAP;AACH,aARD;AASH,SAVM,CAAP;AAWH;AACJ,CA3CD;;AA8CAd,QAAQuB,MAAR,GAAiB,UAACrB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACjCA;AACH,CAFD;;AAIAJ,QAAQwB,MAAR,GAAiB,UAACtB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACjCA;AACH,CAFD","file":"products.js","sourcesContent":["const repository_manufacturer = require('../repositories/manufacturers');\nconst repository_category = require('../repositories/categories');\n\nexports.create = (req, res, next) => {\n\n    /*\n     * Executa as funções sequencialmente.\n     * */\n    Promise.all([vefityManufacturer(), varifyCategory()])\n        .then(() => next())\n        .catch(err => res.status(500).json({ message : err.message}));\n\n\n    /*\n     * Verifica se o fabricante existe na base de dados.\n     * */\n    function vefityManufacturer() {\n        return new Promise((resolve,reject) => {\n            repository_manufacturer.find(req.body.manufacturerId).then(result => {\n                if(result === null){\n                    reject(new Error(\"Manufacturer Not Found\"));\n                }else{\n                    resolve();\n                }\n            }).catch(err => {\n                reject(err);\n            });\n        });\n    }\n\n    /*\n     * Verifica se a categoria existe no banco de dados.\n     * */\n    function varifyCategory() {\n        return new Promise((resolve,reject) => {\n            repository_category.find(req.body.categoryId).then(result => {\n                if(result === null){\n                    reject(new Error(\"Category Not Found\"));\n                }else{\n                    resolve();\n                }\n            }).catch(err => {\n                reject(err);\n            });\n        });\n    }\n};\n\n\nexports.update = (req, res, next) => {\n    next();\n};\n\nexports.delete = (req, res, next) => {\n    next();\n};\n\n\n\n\n\n"]}