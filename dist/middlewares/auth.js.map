{"version":3,"sources":["../../middlewares/auth.js"],"names":["require","fabric","decode","valid","module","exports","permissions","roles","req","res","next","hasSend","forEach","role","index","getFromRequest","then","token","type","console","log","length","lastResponse","catch","err","status","json","errorMessage","message","authorization","body","query","headers"],"mappings":";;eACkCA,QAAQ,oBAAR,C;IAA1BC,M,YAAAA,M;IAAQC,M,YAAAA,M;IAAQC,K,YAAAA,K;;AAExBC,OAAOC,OAAP,CAAeC,WAAf,GAA6B,YAAgB;AAAA,QAAfC,KAAe,uEAAP,EAAO;;AACzC,WAAO,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;;AAEvB,YAAIC,UAAU,KAAd;;AAEAJ,cAAMK,OAAN,CAAc,UAACC,IAAD,EAAOC,KAAP,EAAiB;AAC3BZ,mBAAO,UAAKa,cAAL,CAAoBP,GAApB,CAAP,EAAiCQ,IAAjC,CAAsC,iBAAS;;AAE3C,oBAAIC,MAAMC,IAAN,KAAeL,IAAnB,EAAyB;AACrBM,4BAAQC,GAAR,CAAY,OAAZ;AACAD,4BAAQC,GAAR,CAAY,SAAZ,EAAuBP,IAAvB;AACAM,4BAAQC,GAAR,CAAY,eAAZ,EAA6BH,MAAMC,IAAnC;AACAP,8BAAU,IAAV;AACAD;AACH,iBAND,MAMK;AACD,wBAAGI,UAAUP,MAAMc,MAAN,GAAc,CAAxB,IAA6B,CAACV,OAAjC,EAAyC;AACrCW;AACH;AACJ;AACJ,aAbD,EAaGC,KAbH,CAaS,eAAO;AACZJ,wBAAQC,GAAR,CAAYI,GAAZ;AACA,uBAAOf,IAAIgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,cAAeH,IAAII,OAArB,EAArB,CAAP;AACH,aAhBD;AAiBH,SAlBD;;AAoBA,iBAASN,YAAT,GAAwB;AACpBb,gBAAIgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEE,SAAU,kEAAZ,EAArB;AACH;AAEJ,KA5BD;AA6BH,CA9BD;;AAiCAxB,OAAOC,OAAP,CAAewB,aAAf,GAA+B,UAACrB,GAAD,EAAKC,GAAL,EAASC,IAAT,EAAkB;AAC7C,QAAIO,QAAQT,IAAIsB,IAAJ,CAASb,KAAT,IAAkBT,IAAIuB,KAAJ,CAAUd,KAA5B,IAAqCT,IAAIwB,OAAJ,CAAY,gBAAZ,CAAjD;AACA,QAAIf,KAAJ,EAAW;AACP;;AAEAd,cAAMc,KAAN,EAAaD,IAAb,CAAkB,YAAM;AACpBN;AACH,SAFD,EAEGa,KAFH,CAES,eAAO;AACZd,gBAAIgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEE,SAAUJ,IAAII,OAAhB,EAArB;AACH,SAJD;AAKH,KARD,MAQO;AACH;AACAnB,YAAIgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEE,SAAU,qCAAZ,EAArB;AACH;AACJ,CAdD;;AAiBAxB,OAAOC,OAAP,CAAeU,cAAf,GAAgC,UAACP,GAAD,EAAS;AACvC,WAAOA,IAAIsB,IAAJ,CAASb,KAAT,IAAkBT,IAAIuB,KAAJ,CAAUd,KAA5B,IAAqCT,IAAIwB,OAAJ,CAAY,gBAAZ,CAA5C;AACD,CAFD","file":"auth.js","sourcesContent":["\nconst { fabric, decode, valid } = require('../resources/Token');\n\nmodule.exports.permissions = (roles = []) => {\n    return (req, res, next) => {\n\n        let hasSend = false;\n\n        roles.forEach((role, index) => {\n            decode(this.getFromRequest(req)).then(token => {\n\n                if (token.type === role) {\n                    console.log('aaaaa');\n                    console.log('role = ', role);\n                    console.log('token.type = ', token.type);\n                    hasSend = true;\n                    next();\n                }else{\n                    if(index === roles.length -1 && !hasSend){\n                        lastResponse();\n                    }\n                }\n            }).catch(err => {\n                console.log(err);\n                return res.status(500).json({ errorMessage : err.message });\n            });\n        });\n        \n        function lastResponse() {\n            res.status(403).json({ message : \"You do not have sufficient privileges to access this information\" });\n        }\n\n    }\n};\n\n\nmodule.exports.authorization = (req,res,next) => {\n    let token = req.body.token || req.query.token || req.headers['x-access-token'];\n    if (token) {\n        // verifies secret and checks exp\n\n        valid(token).then(() => {\n            next();\n        }).catch(err => {\n            res.status(500).json({ message : err.message });\n        });\n    } else {\n        // forbidden without token\n        res.status(401).json({ message : \"Unauthorized to verify this content\" });\n    }\n};\n\n\nmodule.exports.getFromRequest = (req) => {\n  return req.body.token || req.query.token || req.headers['x-access-token'];\n};\n"]}